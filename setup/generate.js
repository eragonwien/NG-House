/**
 * This script generates data based on user input
 * 
 * 1. let the user choose which data are going to be generated 
 * 2. check if variables for test generation is available. if not, abort
 * 3. ask the user to input how many data are going to be generated. user can abort from here.
 * 4. count the current number of data
 * 5. generate data base from the input
 * 6. count the number of generated data
 * 
 * Following test data can be generated:
 * address is generated from ADDRESS, POSTAL_CODE, CITY and LAND
 * 
 * user is generated from USER_NAME. email is firstname_lastname_time@lastname.com
 * for address, all address ids are queried and is randomly chosen.
 * role is always standard which has id of 1
 * 
 * house is generated by querying user , type, address and currency
 * a type is randomly chosen. base on type a specific ranges are generated
 * apartment: 20 - 100m, 1-2 bathrooms, 1-2 bedrooms
 * house: 100 - 500, 1-2 bathrooms, 1-4 bedrooms
 * villa : 500 - 1000, 1-5 bathrooms, 1-5 bedrooms
 * others: min 20 - max. 1000, 1-2 bathrooms, 1-2 bedrooms
 * price = (2000 - 5000) * size
 */
var readline = require('readline-sync');
var dotenv = require('dotenv');
var fs = require('fs');
var helper = require('./helper');
var pool = require('../backend/config/db').pool;
var supportedTypes = ['house', 'user', 'address'];

var userModel = require('../backend/components/user/userModel');
var addressModel = require('../backend/components/address/addressModel');
start();

/*  start the data generation
    the user is asked to choose the type of the generated data
*/
function start() {
    console.log('Supported Data: house, user, address');
    var type = readline.question('Which data is going to be generated ? ');
    if (!type in supportedTypes) {
        return console.log('Type is not supported.')
    }
    prepareGenerating(type);
}

/**
 * checks if the .env file exists 
 * the user is asked for the number of data which are going to be generated
 * @param {string} type The type of the data
 */
function prepareGenerating(type) {
    var path = '.env';
    fs.exists(path, function (fileIsExist) {
        if (!fileIsExist) {
            return console.log('File .env not found. Abort.');
        }
        var count = readline.questionInt('How many data should be generated: ');
        if (count < 0) {
            console.log('The number cannot be smaller than zero. Please try again.')
            return prepareGenerating(type);
        }
        generateData(type, count);
    });
}
/**
 * pass data to generation function
 * @param {string} type type of the generated data
 * @param {number} count number of the data
 */
function generateData(type, count) {
    switch (type) {
        case 'house':
            generateHouse(count);
            break;
        case 'user':
            generateUser(count);
            break;
        case 'address':
            generateAddress(count);
            break;
        default: console.log('Unsupported Type.');
            break;
    }
}

/**
 * generates user
 * first checks if the .env file has variable USER_NAME, cancel process if not
 * query all address ids 
 * create queries to add user to the database
 * @param {number} count number of user being generated
 */
function generateUser(count) {
    if (!process.env.USER_NAME) {
        return finish(null, 'no USER_NAME variables found.');
    }
    var names = helper.getListFromString(process.env.USER_NAME);
    var addressModel = require('../backend/components/address/addressModel');
    addressModel.getAllAddresses(function (error, results) {
        if (error) {
            return console.log(error);
        } 
        // extract only the address id from the results
        var address_ids = [];
        results.forEach(function (value, index, array) {
           address_ids.push(value.id); 
        });
        spawnUsers(count, names, address_ids); 
    });
    
}

/**
 * generate users
 * @param {number} count number of users to be generated
 * @param {string[]} names list of names
 * @param {string[]} addressList list of addresses
 * @param {string[]} successCount number of successful query
 */
function spawnUsers(count, names, addressList, successCount) {
    if (!successCount) {
        successCount = 0;
    }
    if (count <= 0) {
        return finish(null, 'Success: ' + successCount);
    }
    var first_name = names[helper.getRandomInt(names.length)];
    var last_name = names[helper.getRandomInt(names.length)];
    var randomValue = helper.getRandomInt(1000);
    var username = first_name + last_name + randomValue;
    var user = {
        role_id: 1,
        first_name: first_name,
        last_name: last_name,
        email: username + '@' + last_name + '.com',
        username: username,
        password: 'test',
        address_id: addressList[helper.getRandomInt(addressList.length)]
    }
    userModel.createUser(user, function (error, result) {
        successCount = (error) ? successCount : successCount + 1;
        count--;
        spawnUsers(count, names, addressList, successCount);
    });
}

/**
 * generates addresses
 * @param {number} count number of addresses
 */
function generateAddress(count) {
    if (!process.env.USER_NAME) {
        return finish(null, 'no USER_NAME variables found.');
    }
    // set postal code length as 4 if no value in .env found
    var postalCodeLength = (process.env.POSTAL_CODE) ? process.env.POSTAL_CODE : 4;
    var names = helper.getListFromString(process.env.USER_NAME);
    // spawn addresses
    spawnAddresses(count, names, postalCodeLength)
}

/**
 * spawns recursively addresses
 * @param {number} count number of addresses
 * @param {string[]} names list of names
 * @param {number} postalCodeLength length of the random postal code
 * @param {number} successCount number of successful actions
 */
function spawnAddresses(count, names, postalCodeLength, successCount) {
    if (!successCount) {
        successCount = 0;
    }
    if (count <= 0) {
        return finish(null, 'Success: ' + successCount);
    }
    var address = {
        address: names[helper.getRandomInt(names.length)] + 'Street ' + helper.getRandomInt(100),
        postal_code: helper.getRandomInt(postalCodeLength),
        city: names[helper.getRandomInt(names.length)] + ' City',
        land: names[helper.getRandomInt(names.length)] + ' Land'
    }
    addressModel.createNewAddress(address, function (error, result) {
        successCount = (error) ? successCount : successCount + 1;
        count--;
        spawnAddresses(count, names, postalCodeLength, successCount);
    });
}

/**
 * generates houses
 * @param {number} count number of houses 
 */
function generateHouse(count) {
   var model = require('../backend/components/house/houseModels');
    
}

/**
 * close the process
 */
function finish(error, message) {
    if (error) {
        console.log(error);
    }
    if (message) {
        console.log(message);
    }
    process.exit();
}




